{"version":3,"sources":["components/Title/index.js","components/EmployeeRow/index.js","components/Search/index.js","components/EmployeesData/index.js","components/DirectoryContainer/index.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","EmployeeRow","src","photo","alt","name","phone_number","email","dob","Search","placeholder","id","type","value","search","onChange","onchange","EmployeesData","state","employeesInfo","event","setState","target","filteredData","this","filter","employee","toLowerCase","indexOf","map","key","Component","DirectoryContainer","Directory","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gvJASeA,MANf,SAAeC,GACZ,OACG,yBAAKC,UAAU,SAASD,EAAME,W,8DCYrBC,MAdf,SAAqBH,GAClB,OACG,yBAAKC,UAAU,eACZ,6BACG,yBAAKG,IAAKJ,EAAMK,MAAOC,IAAKN,EAAMO,QAErC,6BAAMP,EAAMO,MACZ,6BAAMP,EAAMQ,cACZ,6BAAMR,EAAMS,OACZ,6BAAMT,EAAMU,O,MCMNC,MAff,SAAgBX,GACb,OACG,0BAAMC,UAAU,UACb,2BACGW,YAAY,uDACZC,GAAG,YACHC,KAAK,OACLC,MAAOf,EAAMgB,OACbC,SAAUjB,EAAMkB,aCiDbC,E,4MApDZC,MAAQ,CACLC,gBACAL,OAAQ,I,EAGXE,SAAW,SAAAI,GACR,EAAKC,SAAS,CAAEP,OAAQM,EAAME,OAAOT,S,uDAG9B,IAAD,OACAU,EAAeC,KAAKN,MAAMC,cAAcM,QAC3C,SAAAC,GACG,OAC6E,IAA1EA,EAASrB,KAAKsB,cAAcC,QAAQ,EAAKV,MAAMJ,OAAOa,kBAI/D,OAEG,8BACG,6BACG,kBAAC,EAAD,CACGb,OAAQU,KAAKN,MAAMJ,OACnBE,SAAUQ,KAAKR,YAGrB,yBAAKjB,UAAU,aACZ,sCACA,qCACA,6CACA,sCACA,qCAEH,6BACIwB,EAAaM,KAAI,SAAAH,GAAQ,OACvB,kBAAC,EAAD,CACGf,GAAIe,EAASf,GACbmB,IAAKJ,EAASf,GACdR,MAAOuB,EAASvB,MAChBE,KAAMqB,EAASrB,KACfC,aAAcoB,EAASpB,aACvBC,MAAOmB,EAASnB,MAChBC,IAAKkB,EAASlB,e,GA3CPuB,aCKbC,MARf,WACG,OACG,yBAAKjC,UAAU,aACZ,kBAAC,EAAD,QCSMkC,MAZf,WACG,OACG,6BACG,kBAAC,EAAD,KACG,kDACA,mHAEH,kBAAC,EAAD,Q,MCMMC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnC,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,QCEvBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3adaede.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n   return (\n      <div className=\"title\">{props.children}</div>\n   );\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeRow(props) {\n   return (\n      <div className=\"employeeRow\">\n         <div>\n            <img src={props.photo} alt={props.name} />\n         </div>\n         <div>{props.name}</div>\n         <div>{props.phone_number}</div>\n         <div>{props.email}</div>\n         <div>{props.dob}</div> \n      </div>\n   );\n};\n\nexport default EmployeeRow;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Search(props) {\n   return (\n      <form className=\"search\">\n         <input\n            placeholder=\"search by name, date of birth, email or phone number\"\n            id=\"allSearch\"\n            type=\"text\"\n            value={props.search}\n            onChange={props.onchange}\n            // icon=\"search\"\n         />\n      </form>\n   );\n};\n\nexport default Search;","import React, { Component } from \"react\";\nimport \"./style.css\"\nimport employeesInfo from \"../employees.json\";\nimport EmployeeRow from \"../EmployeeRow\";\nimport Search from \"../Search\";\n\n\nclass EmployeesData extends Component {\n   state = {\n      employeesInfo,\n      search: \"\"\n   };\n   \n   onchange = event => {\n      this.setState({ search: event.target.value });\n   };\n\n   render() {\n      const filteredData = this.state.employeesInfo.filter(\n         employee => {\n            return (\n               employee.name.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1\n            )}\n      );\n\n      return (\n         // <React.Fragment>\n         <main>\n            <div>\n               <Search\n                  search={this.state.search}\n                  onchange={this.onchange}\n               />\n            </div>\n            <div className=\"tableHead\">\n               <div>photo</div>\n               <div>name</div>\n               <div>phone number</div>\n               <div>email</div>\n               <div>dob</div>\n            </div>\n            <div>\n               {filteredData.map(employee => (\n                  <EmployeeRow\n                     id={employee.id}\n                     key={employee.id}\n                     photo={employee.photo}\n                     name={employee.name}\n                     phone_number={employee.phone_number}\n                     email={employee.email}\n                     dob={employee.dob}\n                  />\n               ))}\n            </div>\n         </main>\n         // {/* </React.Fragment> */}\n      );\n   };\n}\n\nexport default EmployeesData;","import React from \"react\";\nimport \"./style.css\";\nimport EmployeesData from \"../EmployeesData\";\n\nfunction DirectoryContainer() {\n   return (\n      <div className=\"container\">\n         <EmployeesData />\n      </div>\n   );\n};\n\nexport default DirectoryContainer;","import React from \"react\"\nimport Title from \"../components/Title\";\nimport DirectoryContainer from \"../components/DirectoryContainer\";\n\nfunction Directory() {\n   return (\n      <div>\n         <Title>\n            <h1>Employee Directory</h1>\n            <h3>click on carrots to filter by heading or use the search box to narrow your results</h3>\n         </Title>\n         <DirectoryContainer />\n      </div>\n   );\n};\n\nexport default Directory;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Directory from \"./pages/Directory\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <Route exact path=\"/\" component={Directory} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}